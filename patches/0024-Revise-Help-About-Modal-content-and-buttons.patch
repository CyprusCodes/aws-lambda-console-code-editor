From 7edfcce0e99f657840bca540b8920f733de14769 Mon Sep 17 00:00:00 2001
From: Shiwei Ge <>
Date: Thu, 22 Aug 2024 11:50:38 -0700
Subject: [PATCH] Revise Help->About Modal content and buttons

---
 .../parts/dialogs/dialog.web.contribution.ts  |  2 +-
 .../browser/parts/dialogs/dialogHandler.ts    | 26 +++++--------------
 .../parts/dialogs/dialog.contribution.ts      |  2 +-
 3 files changed, 8 insertions(+), 22 deletions(-)

diff --git a/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts b/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
index a97e57d..50e59f2 100644
--- a/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
+++ b/src/vs/workbench/browser/parts/dialogs/dialog.web.contribution.ts
@@ -37,7 +37,7 @@ export class DialogHandlerContribution extends Disposable implements IWorkbenchC
 	) {
 		super();
 
-		this.impl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService));
+		this.impl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService));
 
 		this.model = (this.dialogService as DialogService).model;
 
diff --git a/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts b/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
index c064ebc..5ffc155 100644
--- a/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
+++ b/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
@@ -14,8 +14,6 @@ import { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';
 import { EventHelper } from 'vs/base/browser/dom';
 import { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';
 import { IProductService } from 'vs/platform/product/common/productService';
-import { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';
-import { fromNow } from 'vs/base/common/date';
 import { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';
 import { MarkdownRenderer } from 'vs/editor/browser/widget/markdownRenderer/browser/markdownRenderer';
 import { defaultButtonStyles, defaultCheckboxStyles, defaultDialogStyles, defaultInputBoxStyles } from 'vs/platform/theme/browser/defaultStyles';
@@ -39,9 +37,7 @@ export class BrowserDialogHandler extends AbstractDialogHandler {
 		@ILayoutService private readonly layoutService: ILayoutService,
 		@IKeybindingService private readonly keybindingService: IKeybindingService,
 		@IInstantiationService private readonly instantiationService: IInstantiationService,
-		@IProductService private readonly productService: IProductService,
-		@IClipboardService private readonly clipboardService: IClipboardService
-	) {
+		@IProductService private readonly productService: IProductService	) {
 		super();
 	}
 
@@ -76,33 +72,23 @@ export class BrowserDialogHandler extends AbstractDialogHandler {
 	}
 
 	async about(): Promise<void> {
-		const detailString = (useAgo: boolean): string => {
+		const detailString = (): string => {
 			return localize('aboutDetail',
-				"Version: {0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
-				this.productService.version || 'Unknown',
-				this.productService.commit || 'Unknown',
-				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
-				navigator.userAgent
+				"Note: The Lambda Code Editor doesn't include all of the features available in the desktop application. To use features like the terminal and debugger, download your code and use the desktop version.",
 			);
 		};
 
-		const detail = detailString(true);
-		const detailToCopy = detailString(false);
+		const detail = detailString();
 
-		const { button } = await this.doShow(
+		await this.doShow(
 			Severity.Info,
 			this.productService.nameLong,
 			[
-				localize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, "&&Copy"),
 				localize('ok', "OK")
 			],
 			detail,
-			1
+			0
 		);
-
-		if (button === 0) {
-			this.clipboardService.writeText(detailToCopy);
-		}
 	}
 
 	private async doShow(type: Severity | DialogType | undefined, message: string, buttons?: string[], detail?: string, cancelId?: number, checkbox?: ICheckbox, inputs?: IInputElement[], customOptions?: ICustomDialogOptions): Promise<IDialogResult> {
diff --git a/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts b/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
index d9493a6..57b20c0 100644
--- a/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
+++ b/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts
@@ -43,7 +43,7 @@ export class DialogHandlerContribution extends Disposable implements IWorkbenchC
 	) {
 		super();
 
-		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService));
+		this.browserImpl = new Lazy(() => new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService));
 		this.nativeImpl = new Lazy(() => new NativeDialogHandler(logService, nativeHostService, productService, clipboardService));
 
 		this.model = (this.dialogService as DialogService).model;
-- 
2.39.3 (Apple Git-146)

