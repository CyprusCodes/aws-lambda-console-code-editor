From 3988fb5c9290654e72ea8359dc761d594159e99f Mon Sep 17 00:00:00 2001
From: Shiwei Ge <>
Date: Sat, 27 Jul 2024 12:35:31 -0700
Subject: [PATCH] Build keyboard extensions and show as non-builtin

This patch manages specific keyboard extension plugins. It disables certain keyboard extension plugins (e.g., vscodevim.vim, ms-vscode.sublime-keybindings, tuttieee.emacs-mcx) by default, as they are considered "injected" extensions. It marks these "injected" extensions as non-builtin extensions, so that they are displayed differently in the Extensions view.
---
 .../browser/extensionsWorkbenchService.ts           | 13 +++++++++++++
 .../browser/webExtensionsScannerService.ts          |  8 ++++++--
 2 files changed, 19 insertions(+), 2 deletions(-)

diff --git a/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts b/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts
index 1518123..8dd74e8 100644
--- a/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts
+++ b/src/vs/workbench/contrib/extensions/browser/extensionsWorkbenchService.ts
@@ -884,6 +884,7 @@ export class ExtensionsWorkbenchService extends Disposable implements IExtension
 	private readonly remoteExtensions: Extensions | null = null;
 	private readonly webExtensions: Extensions | null = null;
 	private readonly extensionsServers: Extensions[] = [];
+	private readonly injectedExtensions: string[] = ['vscodevim.vim', 'ms-vscode.sublime-keybindings', 'tuttieee.emacs-mcx'];
 
 	private updatesCheckDelayer: ThrottledDelayer<void>;
 	private autoUpdateDelayer: ThrottledDelayer<void>;
@@ -1003,12 +1004,24 @@ export class ExtensionsWorkbenchService extends Disposable implements IExtension
 			});
 	}
 
+	private async disableInjectedExtensions(): Promise<void> {
+		const hasDisabledBefore = this.storageService.get('lambda.disableKeyboards.before', StorageScope.APPLICATION, '0');
+		if (hasDisabledBefore === '0') {
+			const things = await this.extensionManagementServerService.webExtensionManagementServer?.extensionManagementService.getInstalled();
+			const targets = things?.filter(v => this.injectedExtensions.includes(v.identifier.id)) || [];
+			this.extensionEnablementService.setEnablement(targets, EnablementState.DisabledGlobally);
+			this.storageService.store('lambda.disableKeyboards.before', '1', StorageScope.APPLICATION, StorageTarget.MACHINE);
+		}
+		return;
+	}
+
 	private async initialize(): Promise<void> {
 		// initialize local extensions
 		await Promise.all([this.queryLocal(), this.extensionService.whenInstalledExtensionsRegistered()]);
 		if (this._store.isDisposed) {
 			return;
 		}
+		await this.disableInjectedExtensions();
 		this.onDidChangeRunningExtensions(this.extensionService.extensions, []);
 		this._register(this.extensionService.onDidChangeExtensions(({ added, removed }) => this.onDidChangeRunningExtensions(added, removed)));
 
diff --git a/src/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts b/src/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts
index 525a296..c861ead 100644
--- a/src/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts
+++ b/src/vs/workbench/services/extensionManagement/browser/webExtensionsScannerService.ts
@@ -100,6 +100,7 @@ export class WebExtensionsScannerService extends Disposable implements IWebExten
 	private readonly customBuiltinExtensionsCacheResource: URI | undefined = undefined;
 	private readonly resourcesAccessQueueMap = new ResourceMap<Queue<IWebExtension[]>>();
 	private readonly extensionsEnabledWithApiProposalVersion: string[];
+	private readonly injectedExtensions: string[] = ['vscodevim.vim', 'ms-vscode.sublime-keybindings', 'tuttieee.emacs-mcx'];
 
 	constructor(
 		@IBrowserWorkbenchEnvironmentService private readonly environmentService: IBrowserWorkbenchEnvironmentService,
@@ -212,6 +213,10 @@ export class WebExtensionsScannerService extends Disposable implements IWebExten
 		return [...result.values()];
 	}
 
+	private isBuiltin(id: string): boolean {
+		return !this.injectedExtensions.includes(id);
+	}
+
 	/**
 	 * All extensions defined via `additionalBuiltinExtensions` API
 	 */
@@ -234,7 +239,7 @@ export class WebExtensionsScannerService extends Disposable implements IWebExten
 		await Promise.allSettled(extensionLocations.map(async extensionLocation => {
 			try {
 				const webExtension = await this.toWebExtension(extensionLocation);
-				const extension = await this.toScannedExtension(webExtension, true);
+				const extension = await this.toScannedExtension(webExtension, this.isBuiltin(webExtension.identifier.id));
 				if (extension.isValid || !scanOptions?.skipInvalidExtensions) {
 					result.push(extension);
 				} else {
