From f54159ccc868e70f186677798db0fc8e03cb7ae9 Mon Sep 17 00:00:00 2001
From: Harsha Babu Tumkur Anand Shankar Babu <>
Date: Tue, 30 Jul 2024 00:38:33 +0000
Subject: [PATCH] Disable download optiona and remove warning

This patch removes the download functionality to simplify the Code OSS. It also removes associated warning message from the application when the web worker extension host was started in a same-origin iframe.
---
 .../files/browser/fileActions.contribution.ts | 36 +++++++++---------
 .../contrib/files/browser/fileActions.ts      | 38 +++++++++----------
 .../browser/webWorkerExtensionHost.ts         |  5 +--
 3 files changed, 39 insertions(+), 40 deletions(-)

diff --git a/src/vs/workbench/contrib/files/browser/fileActions.contribution.ts b/src/vs/workbench/contrib/files/browser/fileActions.contribution.ts
index ed1ea24..7f91c5e 100644
--- a/src/vs/workbench/contrib/files/browser/fileActions.contribution.ts
+++ b/src/vs/workbench/contrib/files/browser/fileActions.contribution.ts
@@ -4,7 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as nls from 'vs/nls';
-import { ToggleAutoSaveAction, FocusFilesExplorer, GlobalCompareResourcesAction, ShowActiveFileInExplorer, CompareWithClipboardAction, NEW_FILE_COMMAND_ID, NEW_FILE_LABEL, NEW_FOLDER_COMMAND_ID, NEW_FOLDER_LABEL, TRIGGER_RENAME_LABEL, MOVE_FILE_TO_TRASH_LABEL, COPY_FILE_LABEL, PASTE_FILE_LABEL, FileCopiedContext, renameHandler, moveFileToTrashHandler, copyFileHandler, pasteFileHandler, deleteFileHandler, cutFileHandler, DOWNLOAD_COMMAND_ID, openFilePreserveFocusHandler, DOWNLOAD_LABEL, OpenActiveFileInEmptyWorkspace, UPLOAD_COMMAND_ID, UPLOAD_LABEL, CompareNewUntitledTextFilesAction, SetActiveEditorReadonlyInSession, SetActiveEditorWriteableInSession, ToggleActiveEditorReadonlyInSession, ResetActiveEditorReadonlyInSession } from 'vs/workbench/contrib/files/browser/fileActions';
+import { ToggleAutoSaveAction, FocusFilesExplorer, GlobalCompareResourcesAction, ShowActiveFileInExplorer, CompareWithClipboardAction, NEW_FILE_COMMAND_ID, NEW_FILE_LABEL, NEW_FOLDER_COMMAND_ID, NEW_FOLDER_LABEL, TRIGGER_RENAME_LABEL, MOVE_FILE_TO_TRASH_LABEL, COPY_FILE_LABEL, PASTE_FILE_LABEL, FileCopiedContext, renameHandler, moveFileToTrashHandler, copyFileHandler, pasteFileHandler, deleteFileHandler, cutFileHandler, openFilePreserveFocusHandler, OpenActiveFileInEmptyWorkspace, UPLOAD_COMMAND_ID, UPLOAD_LABEL, CompareNewUntitledTextFilesAction, SetActiveEditorReadonlyInSession, SetActiveEditorWriteableInSession, ToggleActiveEditorReadonlyInSession, ResetActiveEditorReadonlyInSession } from 'vs/workbench/contrib/files/browser/fileActions';
 import { revertLocalChangesCommand, acceptLocalChangesCommand, CONFLICT_RESOLUTION_CONTEXT } from 'vs/workbench/contrib/files/browser/editors/textFileSaveErrorHandler';
 import { MenuId, MenuRegistry, registerAction2 } from 'vs/platform/actions/common/actions';
 import { ICommandAction } from 'vs/platform/action/common/action';
@@ -20,7 +20,7 @@ import { CLOSE_SAVED_EDITORS_COMMAND_ID, CLOSE_EDITORS_IN_GROUP_COMMAND_ID, CLOS
 import { AutoSaveAfterShortDelayContext } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';
 import { WorkbenchListDoubleSelection } from 'vs/platform/list/browser/listService';
 import { Schemas } from 'vs/base/common/network';
-import { DirtyWorkingCopiesContext, EnterMultiRootWorkspaceSupportContext, HasWebFileSystemAccess, WorkbenchStateContext, WorkspaceFolderCountContext, SidebarFocusContext, ActiveEditorCanRevertContext, ActiveEditorContext, ResourceContextKey, ActiveEditorAvailableEditorIdsContext } from 'vs/workbench/common/contextkeys';
+import { DirtyWorkingCopiesContext, EnterMultiRootWorkspaceSupportContext, WorkbenchStateContext, WorkspaceFolderCountContext, SidebarFocusContext, ActiveEditorCanRevertContext, ActiveEditorContext, ResourceContextKey, ActiveEditorAvailableEditorIdsContext } from 'vs/workbench/common/contextkeys';
 import { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';
 import { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';
 import { ThemeIcon } from 'vs/base/common/themables';
@@ -543,22 +543,22 @@ MenuRegistry.appendMenuItem(MenuId.ExplorerContext, {
 	when: ExplorerFolderContext
 });
 
-MenuRegistry.appendMenuItem(MenuId.ExplorerContext, ({
-	group: '5b_importexport',
-	order: 10,
-	command: {
-		id: DOWNLOAD_COMMAND_ID,
-		title: DOWNLOAD_LABEL
-	},
-	when: ContextKeyExpr.or(
-		// native: for any remote resource
-		ContextKeyExpr.and(IsWebContext.toNegated(), ResourceContextKey.Scheme.notEqualsTo(Schemas.file)),
-		// web: for any files
-		ContextKeyExpr.and(IsWebContext, ExplorerFolderContext.toNegated(), ExplorerRootContext.toNegated()),
-		// web: for any folders if file system API support is provided
-		ContextKeyExpr.and(IsWebContext, HasWebFileSystemAccess)
-	)
-}));
+// MenuRegistry.appendMenuItem(MenuId.ExplorerContext, ({
+// 	group: '5b_importexport',
+// 	order: 10,
+// 	command: {
+// 		id: DOWNLOAD_COMMAND_ID,
+// 		title: DOWNLOAD_LABEL
+// 	},
+// 	when: ContextKeyExpr.or(
+// 		// native: for any remote resource
+// 		ContextKeyExpr.and(IsWebContext.toNegated(), ResourceContextKey.Scheme.notEqualsTo(Schemas.file)),
+// 		// web: for any files
+// 		ContextKeyExpr.and(IsWebContext, ExplorerFolderContext.toNegated(), ExplorerRootContext.toNegated()),
+// 		// web: for any folders if file system API support is provided
+// 		ContextKeyExpr.and(IsWebContext, HasWebFileSystemAccess)
+// 	)
+// }));
 
 MenuRegistry.appendMenuItem(MenuId.ExplorerContext, ({
 	group: '5b_importexport',
diff --git a/src/vs/workbench/contrib/files/browser/fileActions.ts b/src/vs/workbench/contrib/files/browser/fileActions.ts
index 0b92df8..91c40b9 100644
--- a/src/vs/workbench/contrib/files/browser/fileActions.ts
+++ b/src/vs/workbench/contrib/files/browser/fileActions.ts
@@ -49,7 +49,7 @@ import { trim, rtrim } from 'vs/base/common/strings';
 import { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';
 import { ResourceFileEdit } from 'vs/editor/browser/services/bulkEditService';
 import { IExplorerService } from 'vs/workbench/contrib/files/browser/files';
-import { BrowserFileUpload, FileDownload } from 'vs/workbench/contrib/files/browser/fileImportExport';
+import { BrowserFileUpload } from 'vs/workbench/contrib/files/browser/fileImportExport';
 import { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';
 import { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';
 import { IPathService } from 'vs/workbench/services/path/common/pathService';
@@ -1033,29 +1033,29 @@ export const cutFileHandler = async (accessor: ServicesAccessor) => {
 	}
 };
 
-const downloadFileHandler = async (accessor: ServicesAccessor) => {
-	const explorerService = accessor.get(IExplorerService);
-	const notificationService = accessor.get(INotificationService);
-	const instantiationService = accessor.get(IInstantiationService);
+// const downloadFileHandler = async (accessor: ServicesAccessor) => {
+// 	const explorerService = accessor.get(IExplorerService);
+// 	const notificationService = accessor.get(INotificationService);
+// 	const instantiationService = accessor.get(IInstantiationService);
 
-	const context = explorerService.getContext(true);
-	const explorerItems = context.length ? context : explorerService.roots;
+// 	const context = explorerService.getContext(true);
+// 	const explorerItems = context.length ? context : explorerService.roots;
 
-	const downloadHandler = instantiationService.createInstance(FileDownload);
+// 	const downloadHandler = instantiationService.createInstance(FileDownload);
 
-	try {
-		await downloadHandler.download(explorerItems);
-	} catch (error) {
-		notificationService.error(error);
+// 	try {
+// 		await downloadHandler.download(explorerItems);
+// 	} catch (error) {
+// 		notificationService.error(error);
 
-		throw error;
-	}
-};
+// 		throw error;
+// 	}
+// };
 
-CommandsRegistry.registerCommand({
-	id: DOWNLOAD_COMMAND_ID,
-	handler: downloadFileHandler
-});
+// CommandsRegistry.registerCommand({
+// 	id: DOWNLOAD_COMMAND_ID,
+// 	handler: downloadFileHandler
+// });
 
 const uploadFileHandler = async (accessor: ServicesAccessor) => {
 	const explorerService = accessor.get(IExplorerService);
diff --git a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
index b6d4f0f..5a8240b 100644
--- a/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
+++ b/src/vs/workbench/services/extensions/browser/webWorkerExtensionHost.ts
@@ -110,9 +110,8 @@ export class WebWorkerExtensionHost extends Disposable implements IExtensionHost
 				res.searchParams.set('parentOrigin', mainWindow.origin);
 				res.searchParams.set('salt', stableOriginUUID);
 				return res.toString();
-			}
-
-			console.warn(`The web worker extension host is started in a same-origin iframe!`);
+			}
+
 		}
 
 		const relativeExtensionHostIframeSrc = FileAccess.asBrowserUri(iframeModulePath);
-- 
2.40.1

