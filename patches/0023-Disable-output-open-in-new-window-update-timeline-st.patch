From 21e6ddc8e47861685c10d7b2d9156134b5613a22 Mon Sep 17 00:00:00 2001
From: Harsha Babu Tumkur Anand Shankar Babu <>
Date: Tue, 20 Aug 2024 20:10:28 +0000
Subject: [PATCH] Disable output open in new window/update timeline string

---
 .../output/browser/output.contribution.ts     | 50 +++++++++----------
 .../contrib/timeline/browser/timelinePane.ts  |  4 +-
 2 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/src/vs/workbench/contrib/output/browser/output.contribution.ts b/src/vs/workbench/contrib/output/browser/output.contribution.ts
index 6d3f4d9..005ddc6 100644
--- a/src/vs/workbench/contrib/output/browser/output.contribution.ts
+++ b/src/vs/workbench/contrib/output/browser/output.contribution.ts
@@ -21,7 +21,7 @@ import { IViewsService } from 'vs/workbench/services/views/common/viewsService';
 import { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';
 import { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';
 import { IQuickPickItem, IQuickInputService, IQuickPickSeparator, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';
-import { AUX_WINDOW_GROUP, AUX_WINDOW_GROUP_TYPE, IEditorService } from 'vs/workbench/services/editor/common/editorService';
+import { AUX_WINDOW_GROUP_TYPE, IEditorService } from 'vs/workbench/services/editor/common/editorService';
 import { assertIsDefined } from 'vs/base/common/types';
 import { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';
 import { Codicon } from 'vs/base/common/codicons';
@@ -98,7 +98,7 @@ class OutputContribution extends Disposable implements IWorkbenchContribution {
 		this.registerClearOutputAction();
 		this.registerToggleAutoScrollAction();
 		this.registerOpenActiveOutputFileAction();
-		this.registerOpenActiveOutputFileInAuxWindowAction();
+		// this.registerOpenActiveOutputFileInAuxWindowAction();
 		this.registerShowLogsAction();
 		this.registerOpenLogFileAction();
 		this.registerConfigureActiveOutputLogLevelAction();
@@ -289,29 +289,29 @@ class OutputContribution extends Disposable implements IWorkbenchContribution {
 		}));
 	}
 
-	private registerOpenActiveOutputFileInAuxWindowAction(): void {
-		const that = this;
-		this._register(registerAction2(class extends Action2 {
-			constructor() {
-				super({
-					id: `workbench.action.openActiveLogOutputFileInNewWindow`,
-					title: nls.localize2('openActiveOutputFileInNewWindow', "Open Output in New Window"),
-					menu: [{
-						id: MenuId.ViewTitle,
-						when: ContextKeyExpr.equals('view', OUTPUT_VIEW_ID),
-						group: 'navigation',
-						order: 5,
-						isHiddenByDefault: true
-					}],
-					icon: Codicon.emptyWindow,
-					precondition: CONTEXT_ACTIVE_FILE_OUTPUT
-				});
-			}
-			async run(): Promise<void> {
-				that.openActiveOutoutFile(AUX_WINDOW_GROUP);
-			}
-		}));
-	}
+	// private registerOpenActiveOutputFileInAuxWindowAction(): void {
+	// 	const that = this;
+	// 	this._register(registerAction2(class extends Action2 {
+	// 		constructor() {
+	// 			super({
+	// 				id: `workbench.action.openActiveLogOutputFileInNewWindow`,
+	// 				title: nls.localize2('openActiveOutputFileInNewWindow', "Open Output in New Window"),
+	// 				menu: [{
+	// 					id: MenuId.ViewTitle,
+	// 					when: ContextKeyExpr.equals('view', OUTPUT_VIEW_ID),
+	// 					group: 'navigation',
+	// 					order: 5,
+	// 					isHiddenByDefault: true
+	// 				}],
+	// 				icon: Codicon.emptyWindow,
+	// 				precondition: CONTEXT_ACTIVE_FILE_OUTPUT
+	// 			});
+	// 		}
+	// 		async run(): Promise<void> {
+	// 			that.openActiveOutoutFile(AUX_WINDOW_GROUP);
+	// 		}
+	// 	}));
+	// }
 
 	private async openActiveOutoutFile(group?: AUX_WINDOW_GROUP_TYPE): Promise<void> {
 		const fileOutputChannelDescriptor = this.getFileOutputChannelDescriptor();
diff --git a/src/vs/workbench/contrib/timeline/browser/timelinePane.ts b/src/vs/workbench/contrib/timeline/browser/timelinePane.ts
index 87503bb..e58002d 100644
--- a/src/vs/workbench/contrib/timeline/browser/timelinePane.ts
+++ b/src/vs/workbench/contrib/timeline/browser/timelinePane.ts
@@ -817,7 +817,7 @@ export class TimelinePane extends ViewPane {
 					this.message = localize('timeline.noTimelineSourcesEnabled', "All timeline sources have been filtered out.");
 				} else {
 					if (this.configurationService.getValue('workbench.localHistory.enabled') && !this.excludedSources.has('timeline.localHistory')) {
-						this.message = localize('timeline.noLocalHistoryYet', "Local History will track recent changes as you save them unless the file has been excluded or is too large.");
+						this.message = localize('timeline.noLocalHistoryYet', "Saved changes to your function code appear here.");
 					} else if (this.excludedSources.size > 0) {
 						this.message = localize('timeline.noTimelineInfoFromEnabledSources', "No filtered timeline information was provided.");
 					} else {
@@ -825,7 +825,7 @@ export class TimelinePane extends ViewPane {
 					}
 				}
 				if (!scmProviderCount || scmProviderCount === 0) {
-					this.message += ' ' + localize('timeline.noSCM', "Source Control has not been configured.");
+					this.message += ' ' + localize('timeline.noSCM', "");
 				}
 			}
 		} else {
-- 
2.40.1

