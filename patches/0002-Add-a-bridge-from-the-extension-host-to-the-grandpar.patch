From e3a0603238e3cb230385c7492b294c09ca727909 Mon Sep 17 00:00:00 2001
From: William Gaul <>
Date: Sat, 20 Apr 2024 20:09:30 +0000
Subject: [PATCH] Add a bridge from the extension host to the grandparent
 window

This allows an extension to do the following:

  vscode.window.receiveMessage((message) => {
    console.log('Got from embedding page:', message);
  });
  vscode.window.sendMessage('Hello from extension');

Messages are sent over the extension host proxy to the main window,
then over postMessage to its parent window (if any).

To prevent any extension from using this functionality, the APIs are
gated behind an "embedded" API proposal which can only be set in a
global product.json like so:

  {
    "productConfiguration": {
      "extensionEnabledApiProposals": {
        "my-extension": ["embedded"]
      }
    }
  }

If the IDE is not being run in an embedded context, the APIs will do
nothing, i.e. any messages sent are swallowed and no messages will be
received.
---
 .../workbench/api/browser/mainThreadWindow.ts | 20 +++++++++++++++++++
 .../workbench/api/common/extHost.api.impl.ts  |  8 ++++++++
 .../workbench/api/common/extHost.protocol.ts  |  2 ++
 src/vs/workbench/api/common/extHostWindow.ts  | 14 +++++++++++++
 .../common/extensionsProposedApi.ts           |  2 +-
 src/vscode-dts/vscode.d.ts                    |  2 ++
 6 files changed, 47 insertions(+), 1 deletion(-)

diff --git a/src/vs/workbench/api/browser/mainThreadWindow.ts b/src/vs/workbench/api/browser/mainThreadWindow.ts
index f77f0b2..458db2e 100644
--- a/src/vs/workbench/api/browser/mainThreadWindow.ts
+++ b/src/vs/workbench/api/browser/mainThreadWindow.ts
@@ -3,6 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
+import { mainWindow } from 'vs/base/browser/window';
 import { Event } from 'vs/base/common/event';
 import { DisposableStore } from 'vs/base/common/lifecycle';
 import { URI, UriComponents } from 'vs/base/common/uri';
@@ -29,6 +30,17 @@ export class MainThreadWindow implements MainThreadWindowShape {
 		Event.latch(hostService.onDidChangeFocus)
 			(this.proxy.$onDidChangeWindowFocus, this.proxy, this.disposables);
 		userActivityService.onDidChangeIsActive(this.proxy.$onDidChangeWindowActive, this.proxy, this.disposables);
+
+		mainWindow.addEventListener('message', (e) => {
+			if (e.origin !== this.getOrigin() || e.source !== mainWindow.parent) {
+				return;
+			}
+			this.proxy.$receiveMessage(e.data);
+		});
+	}
+
+	private getOrigin() {
+		return /origin=([^&?#=]+)|$/.exec(mainWindow.location.search)?.[1];
 	}
 
 	dispose(): void {
@@ -63,4 +75,12 @@ export class MainThreadWindow implements MainThreadWindowShape {
 		const result = await this.openerService.resolveExternalUri(URI.revive(uriComponents), options);
 		return result.resolved;
 	}
+
+	$sendMessage(message: any): void {
+		const origin = this.getOrigin();
+		if (!origin) {
+			return;
+		}
+		mainWindow.parent.postMessage(message, origin);
+	}
 }
diff --git a/src/vs/workbench/api/common/extHost.api.impl.ts b/src/vs/workbench/api/common/extHost.api.impl.ts
index 7f9eae1..a8ff679 100644
--- a/src/vs/workbench/api/common/extHost.api.impl.ts
+++ b/src/vs/workbench/api/common/extHost.api.impl.ts
@@ -681,6 +681,14 @@ export function createApiFactoryAndRegisterActors(accessor: ServicesAccessor): I
 
 		// namespace: window
 		const window: typeof vscode.window = {
+			receiveMessage(listener, thisArg?, disposables?) {
+				checkProposedApiEnabled(extension, 'embedded' as any);
+				return _asExtensionEvent(extHostWindow.receiveMessage)(listener, thisArg, disposables);
+			},
+			sendMessage(message: any) {
+				checkProposedApiEnabled(extension, 'embedded' as any);
+				extHostWindow.sendMessage(message);
+			},
 			get activeTextEditor() {
 				return extHostEditors.getActiveTextEditor();
 			},
diff --git a/src/vs/workbench/api/common/extHost.protocol.ts b/src/vs/workbench/api/common/extHost.protocol.ts
index c4f5c72..cce4ee0 100644
--- a/src/vs/workbench/api/common/extHost.protocol.ts
+++ b/src/vs/workbench/api/common/extHost.protocol.ts
@@ -1594,6 +1594,7 @@ export interface MainThreadWindowShape extends IDisposable {
 	$getInitialState(): Promise<{ isFocused: boolean; isActive: boolean }>;
 	$openUri(uri: UriComponents, uriString: string | undefined, options: IOpenUriOptions): Promise<boolean>;
 	$asExternalUri(uri: UriComponents, options: IOpenUriOptions): Promise<UriComponents>;
+	$sendMessage(message: any): void;
 }
 
 export enum CandidatePortSource {
@@ -2429,6 +2430,7 @@ export interface ExtHostDecorationsShape {
 export interface ExtHostWindowShape {
 	$onDidChangeWindowFocus(value: boolean): void;
 	$onDidChangeWindowActive(value: boolean): void;
+	$receiveMessage(message: any): void;
 }
 
 export interface ExtHostLogLevelServiceShape {
diff --git a/src/vs/workbench/api/common/extHostWindow.ts b/src/vs/workbench/api/common/extHostWindow.ts
index 3d32449..cb4fd63 100644
--- a/src/vs/workbench/api/common/extHostWindow.ts
+++ b/src/vs/workbench/api/common/extHostWindow.ts
@@ -24,6 +24,7 @@ export class ExtHostWindow implements ExtHostWindowShape {
 	private _proxy: MainThreadWindowShape;
 
 	private readonly _onDidChangeWindowState = new Emitter<WindowState>();
+	private _receiveMessage: Emitter<any>;
 	readonly onDidChangeWindowState: Event<WindowState> = this._onDidChangeWindowState.event;
 
 	private _state = ExtHostWindow.InitialState;
@@ -49,6 +50,7 @@ export class ExtHostWindow implements ExtHostWindowShape {
 			this.onDidChangeWindowProperty('focused', isFocused);
 			this.onDidChangeWindowProperty('active', isActive);
 		});
+		this._receiveMessage = new Emitter<any>();
 	}
 
 	$onDidChangeWindowFocus(value: boolean) {
@@ -94,6 +96,18 @@ export class ExtHostWindow implements ExtHostWindowShape {
 		const result = await this._proxy.$asExternalUri(uri, options);
 		return URI.from(result);
 	}
+
+	$receiveMessage(message: any): void {
+		this._receiveMessage.fire(message);
+	}
+
+	public get receiveMessage(): Event<any> {
+		return this._receiveMessage.event;
+	}
+
+	sendMessage(message: any): void {
+		this._proxy.$sendMessage(message);
+	}
 }
 
 export const IExtHostWindow = createDecorator<IExtHostWindow>('IExtHostWindow');
diff --git a/src/vs/workbench/services/extensions/common/extensionsProposedApi.ts b/src/vs/workbench/services/extensions/common/extensionsProposedApi.ts
index e92c5e0..d345340 100644
--- a/src/vs/workbench/services/extensions/common/extensionsProposedApi.ts
+++ b/src/vs/workbench/services/extensions/common/extensionsProposedApi.ts
@@ -37,7 +37,7 @@ export class ExtensionsProposedApi {
 			for (const [k, value] of Object.entries(productService.extensionEnabledApiProposals)) {
 				const key = ExtensionIdentifier.toKey(k);
 				const proposalNames = value.filter(name => {
-					if (!allApiProposals[<ApiProposalName>name]) {
+					if (!allApiProposals[<ApiProposalName>name] && name !== 'embedded') {
 						_logService.warn(`Via 'product.json#extensionEnabledApiProposals' extension '${key}' wants API proposal '${name}' but that proposal DOES NOT EXIST. Likely, the proposal has been finalized (check 'vscode.d.ts') or was abandoned.`);
 						return false;
 					}
diff --git a/src/vscode-dts/vscode.d.ts b/src/vscode-dts/vscode.d.ts
index 357bd5e..9f4900f 100644
--- a/src/vscode-dts/vscode.d.ts
+++ b/src/vscode-dts/vscode.d.ts
@@ -10322,6 +10322,8 @@ declare module 'vscode' {
 	 * asking for user input.
 	 */
 	export namespace window {
+		export const receiveMessage: Event<any>;
+		export function sendMessage(message: any): void;
 
 		/**
 		 * Represents the grid widget within the main editor area
-- 
2.40.1

